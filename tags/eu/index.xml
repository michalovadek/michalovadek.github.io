<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>EU on Michal Ovádek</title>
    <link>/tags/eu/</link>
    <description>Recent content in EU on Michal Ovádek</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2020 Michal Ovádek</copyright>
    <lastBuildDate>Wed, 16 Dec 2020 00:00:00 +0000</lastBuildDate>
    
	    <atom:link href="/tags/eu/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The eurlex R package</title>
      <link>/post/the-eurlex-r-package/</link>
      <pubDate>Wed, 16 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/the-eurlex-r-package/</guid>
      <description>


&lt;p&gt;Dozens of political scientists and legal scholars use data on European Union laws in their research. The provenance of these data is rarely discussed. More often than not, researchers resort to the quick and dirty technique of scraping entire html pages from &lt;code&gt;eur-lex.europa.eu&lt;/code&gt;. This is not the optimal, nor preferred (from the perspective of the server host) approach of retrieving data, however, especially as the Publication Office of the European Union, the public body behind Eur-Lex, operates several dedicated APIs for automated retrieval of its data.&lt;/p&gt;
&lt;p&gt;The allure of web scraping is completely understandable. Not only is it easier to download data that can be readily seen in a user-friendly manner through a browser, using the dedicated APIs requires technical knowledge of semantic web and Client URL technologies, which is not necessarily widespread among researchers. And why go through the pain of learning how to compile SPARQL queries when it is much easier to simply download the web page?&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;eurlex&lt;/code&gt; &lt;a href=&#34;https://github.com/michalovadek/eurlex&#34;&gt;R package&lt;/a&gt; attempts to significantly reduce the overhead associated with using the SPARQL and REST APIs made available by the EU Publication Office. Although at present it does not offer access to the same array of information as comprehensive web scraping might, the package provides simpler, more efficient and transparent access to data on European Union law. This vignette gives a quick guide to the package and an even quicker introduction to the Eur-Lex dataverse.&lt;/p&gt;
&lt;div id=&#34;the-eurlex-package&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;The &lt;code&gt;eurlex&lt;/code&gt; package&lt;/h1&gt;
&lt;p&gt;The &lt;code&gt;eurlex&lt;/code&gt; package currently envisions the typical use-case to consist of getting bulk information about EU legislation into R as fast as possible. The package contains three core functions to achieve that objective: &lt;code&gt;elx_make_query()&lt;/code&gt; to create pre-defined or customized SPARQL queries; &lt;code&gt;elx_run_query()&lt;/code&gt; to execute the pre-made or any other manually input query; and &lt;code&gt;elx_fetch_data()&lt;/code&gt; to fire GET requests for certain metadata to the REST API.&lt;/p&gt;
&lt;div id=&#34;elx_make_query-generate-sparql-queries&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;code&gt;elx_make_query()&lt;/code&gt;: Generate SPARQL queries&lt;/h2&gt;
&lt;p&gt;The function &lt;code&gt;elx_make_query&lt;/code&gt; takes as its first argument the type of resource to be retrieved from the semantic database that powers Eur-Lex (and other publications) called Cellar.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(eurlex)
library(dplyr) # my preference, not needed for the package

query_dir &amp;lt;- elx_make_query(resource_type = &amp;quot;directive&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Currently, it is possible to choose from among a host of resource types, including directives, regulations and even case law (see function description for the full list). It is also possible to manually specify a resource type from the &lt;a href=&#34;http://publications.europa.eu/resource/authority/resource-type&#34;&gt;eligible list&lt;/a&gt;.&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The choice of resource type is then reflected in the SPARQL query generated by the function:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;query_dir %&amp;gt;% 
  glue::as_glue() # for nicer printing&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## PREFIX cdm: &amp;lt;http://publications.europa.eu/ontology/cdm#&amp;gt;
##   PREFIX annot: &amp;lt;http://publications.europa.eu/ontology/annotation#&amp;gt;
##   PREFIX skos:&amp;lt;http://www.w3.org/2004/02/skos/core#&amp;gt;
##   PREFIX dc:&amp;lt;http://purl.org/dc/elements/1.1/&amp;gt;
##   PREFIX xsd:&amp;lt;http://www.w3.org/2001/XMLSchema#&amp;gt;
##   PREFIX rdf:&amp;lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&amp;gt;
##   PREFIX owl:&amp;lt;http://www.w3.org/2002/07/owl#&amp;gt;
##   select distinct ?work ?type ?celex where{ ?work cdm:work_has_resource-type ?type. FILTER(?type=&amp;lt;http://publications.europa.eu/resource/authority/resource-type/DIR&amp;gt;||
##   ?type=&amp;lt;http://publications.europa.eu/resource/authority/resource-type/DIR_IMPL&amp;gt;||
##   ?type=&amp;lt;http://publications.europa.eu/resource/authority/resource-type/DIR_DEL&amp;gt;) 
##  FILTER not exists{?work cdm:work_has_resource-type &amp;lt;http://publications.europa.eu/resource/authority/resource-type/CORRIGENDUM&amp;gt;} OPTIONAL{?work cdm:resource_legal_id_celex ?celex.} }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are various ways of querying the same information in the Cellar database due to the existence of several overlapping classes and identifiers describing the same resources. The queries generated by the function should offer a reliable way of obtaining exhaustive results, as they have been validated by the helpdesk of the Publication Office. At the same time, it is always possible there will be issues either on the query or the database side; please report any you encounter through Github.&lt;/p&gt;
&lt;p&gt;The other arguments in &lt;code&gt;elx_make_query()&lt;/code&gt; relate to additional metadata to be returned. The results include by default the &lt;a href=&#34;https://eur-lex.europa.eu/content/tools/TableOfSectors/types_of_documents_in_eurlex.html&#34;&gt;CELEX number&lt;/a&gt; and exclude corrigenda (corrections of errors in legislation). Other data needs to be opted into. Make sure to select ones that are logically compatible (e.g. case law does not have a legal basis). More options should be added in the future.&lt;/p&gt;
&lt;p&gt;Note that availability of data for each variable has an impact on the results. The data frame returned by the query will be shrunken to the size of the variable with most missing data. It is recommended to always compare results from a desired query to a minimal query requesting only celex ids.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;elx_make_query(resource_type = &amp;quot;recommendation&amp;quot;, include_date = TRUE, include_lbs = TRUE) %&amp;gt;% 
  glue::as_glue()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## PREFIX cdm: &amp;lt;http://publications.europa.eu/ontology/cdm#&amp;gt;
##   PREFIX annot: &amp;lt;http://publications.europa.eu/ontology/annotation#&amp;gt;
##   PREFIX skos:&amp;lt;http://www.w3.org/2004/02/skos/core#&amp;gt;
##   PREFIX dc:&amp;lt;http://purl.org/dc/elements/1.1/&amp;gt;
##   PREFIX xsd:&amp;lt;http://www.w3.org/2001/XMLSchema#&amp;gt;
##   PREFIX rdf:&amp;lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&amp;gt;
##   PREFIX owl:&amp;lt;http://www.w3.org/2002/07/owl#&amp;gt;
##   select distinct ?work ?type ?celex str(?date) ?lbs ?lbcelex ?lbsuffix where{ ?work cdm:work_has_resource-type ?type. FILTER(?type=&amp;lt;http://publications.europa.eu/resource/authority/resource-type/RECO&amp;gt;||
##                    ?type=&amp;lt;http://publications.europa.eu/resource/authority/resource-type/RECO_DEC&amp;gt;||
##                    ?type=&amp;lt;http://publications.europa.eu/resource/authority/resource-type/RECO_DIR&amp;gt;||
##                    ?type=&amp;lt;http://publications.europa.eu/resource/authority/resource-type/RECO_OPIN&amp;gt;||
##                    ?type=&amp;lt;http://publications.europa.eu/resource/authority/resource-type/RECO_RES&amp;gt;||
##                    ?type=&amp;lt;http://publications.europa.eu/resource/authority/resource-type/RECO_REG&amp;gt;||
##                    ?type=&amp;lt;http://publications.europa.eu/resource/authority/resource-type/RECO_RECO&amp;gt;||
##                    ?type=&amp;lt;http://publications.europa.eu/resource/authority/resource-type/RECO_DRAFT&amp;gt;) 
##  FILTER not exists{?work cdm:work_has_resource-type &amp;lt;http://publications.europa.eu/resource/authority/resource-type/CORRIGENDUM&amp;gt;} OPTIONAL{?work cdm:resource_legal_id_celex ?celex.} OPTIONAL{?work cdm:work_date_document ?date.} OPTIONAL{?work cdm:resource_legal_based_on_resource_legal ?lbs.
##     ?lbs cdm:resource_legal_id_celex ?lbcelex.
##     OPTIONAL{?bn owl:annotatedSource ?work.
##     ?bn owl:annotatedProperty &amp;lt;http://publications.europa.eu/ontology/cdm#resource_legal_based_on_resource_legal&amp;gt;.
##     ?bn owl:annotatedTarget ?lbs.
##     ?bn annot:comment_on_legal_basis ?lbsuffix}} }&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# minimal query: elx_make_query(resource_type = &amp;quot;recommendation&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now that we have a query, we are ready to run it.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;elx_run_query-execute-sparql-queries&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;code&gt;elx_run_query()&lt;/code&gt;: Execute SPARQL queries&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;elx_run_query()&lt;/code&gt; sends SPARQL queries to a pre-specified endpoint. The function takes the query string as the main argument, which means you can manually pass it any working SPARQL query (relevant to official EU publications).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;results &amp;lt;- elx_run_query(query = query_dir)

# the functions are compatible with piping
# 
# elx_make_query(&amp;quot;directive&amp;quot;) %&amp;gt;% 
#   elx_run_query()&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;as_tibble(results)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4,314 x 3
##    work                                  type                            celex  
##    &amp;lt;chr&amp;gt;                                 &amp;lt;chr&amp;gt;                           &amp;lt;chr&amp;gt;  
##  1 http://publications.europa.eu/resour~ http://publications.europa.eu/~ 31979L~
##  2 http://publications.europa.eu/resour~ http://publications.europa.eu/~ 31989L~
##  3 http://publications.europa.eu/resour~ http://publications.europa.eu/~ 31984L~
##  4 http://publications.europa.eu/resour~ http://publications.europa.eu/~ 31966L~
##  5 http://publications.europa.eu/resour~ http://publications.europa.eu/~ 31993L~
##  6 http://publications.europa.eu/resour~ http://publications.europa.eu/~ 31992L~
##  7 http://publications.europa.eu/resour~ http://publications.europa.eu/~ 31983L~
##  8 http://publications.europa.eu/resour~ http://publications.europa.eu/~ 31966L~
##  9 http://publications.europa.eu/resour~ http://publications.europa.eu/~ 31974L~
## 10 http://publications.europa.eu/resour~ http://publications.europa.eu/~ 31982L~
## # ... with 4,304 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The function outputs a &lt;code&gt;data.frame&lt;/code&gt; where each column corresponds to one of the requested variables, while the rows accumulate observations of the resource type satisfying the query criteria. Obviously, the more data is to be returned, the longer the execution time, varying from a few seconds to several minutes, depending also on your connection.&lt;/p&gt;
&lt;p&gt;The first column always contains the unique URI of a “work” (legislative act or court judgment) which identifies each resource in Cellar. Several human-readable identifiers are normally associated with each “work” but the most useful one is CELEX, retrieved by default.&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;One column you should always pay attention to is &lt;code&gt;type&lt;/code&gt; (as in &lt;code&gt;resource_type&lt;/code&gt;). The URIs contained there reflect the FILTER argument in the SPARQL query, which is manually pre-specified. All resources are indexed as being of one type or another. For example, when retrieving directives, the results are going to return also delegated directives, which might not be desirable, depending on your needs. You can filter results by &lt;code&gt;type&lt;/code&gt; to make the necessary adjustments. The queries are expansive by default in the spirit of erring on the side of over-inclusiveness rather than vice versa.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;head(results$type,5)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;http://publications.europa.eu/resource/authority/resource-type/DIR&amp;quot;
## [2] &amp;quot;http://publications.europa.eu/resource/authority/resource-type/DIR&amp;quot;
## [3] &amp;quot;http://publications.europa.eu/resource/authority/resource-type/DIR&amp;quot;
## [4] &amp;quot;http://publications.europa.eu/resource/authority/resource-type/DIR&amp;quot;
## [5] &amp;quot;http://publications.europa.eu/resource/authority/resource-type/DIR&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;results %&amp;gt;% 
  distinct(type)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 1
##   type                                                                   
##   &amp;lt;chr&amp;gt;                                                                  
## 1 http://publications.europa.eu/resource/authority/resource-type/DIR     
## 2 http://publications.europa.eu/resource/authority/resource-type/DIR_IMPL
## 3 http://publications.europa.eu/resource/authority/resource-type/DIR_DEL&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The data is returned in the long format, which means that rows are recycled up to the length of the variable with the most data points. For example, if 20 directives are returned, each with two legal bases, the resulting &lt;code&gt;data.frame&lt;/code&gt; will have 40 rows. Some variables, such as dates, contain unexpectedly several entries for some documents. You should always check the number of unique identifiers in the results instead of assuming that each row is a unique observation.&lt;/p&gt;
&lt;div id=&#34;eurovoc-descriptors&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;EuroVoc descriptors&lt;/h3&gt;
&lt;p&gt;EuroVoc is a multilingual thesaurus, keywords from which are used to describe the content of European Union documents. Most resource types that can be retrieved with the pre-defined queries in this package can be accompanied by EuroVoc keywords and these can be retrieved as other variables.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rec_eurovoc &amp;lt;- elx_make_query(&amp;quot;recommendation&amp;quot;, include_eurovoc = TRUE, limit = 10) %&amp;gt;% 
  elx_run_query() # truncated results for sake of the example

rec_eurovoc %&amp;gt;% 
  select(celex, eurovoc)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10 x 2
##    celex          eurovoc                      
##    &amp;lt;chr&amp;gt;          &amp;lt;chr&amp;gt;                        
##  1 32012H0090     http://eurovoc.europa.eu/1425
##  2 31962H0816     http://eurovoc.europa.eu/1004
##  3 31974H0435     http://eurovoc.europa.eu/1085
##  4 31996H0592     http://eurovoc.europa.eu/1076
##  5 32015H0818(10) http://eurovoc.europa.eu/1021
##  6 31974H0256     http://eurovoc.europa.eu/1318
##  7 31999H0333     http://eurovoc.europa.eu/1442
##  8 52004SC0086    http://eurovoc.europa.eu/1504
##  9 32003H0579     http://eurovoc.europa.eu/114 
## 10 E2004C0055     http://eurovoc.europa.eu/1442&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By default, the endpoint returns the EuroVoc concept codes rather than the labels (keywords). The function &lt;code&gt;elx_label_eurovoc()&lt;/code&gt; needs to be called to obtain a look-up table with the labels.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;eurovoc_lookup &amp;lt;- elx_label_eurovoc(uri_eurovoc = rec_eurovoc$eurovoc)

print(eurovoc_lookup)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 9 x 2
##   eurovoc                       labels                       
##   &amp;lt;chr&amp;gt;                         &amp;lt;chr&amp;gt;                        
## 1 http://eurovoc.europa.eu/1085 France                       
## 2 http://eurovoc.europa.eu/1442 food inspection              
## 3 http://eurovoc.europa.eu/1076 form                         
## 4 http://eurovoc.europa.eu/1318 Germany                      
## 5 http://eurovoc.europa.eu/1504 Ireland                      
## 6 http://eurovoc.europa.eu/114  Council of the European Union
## 7 http://eurovoc.europa.eu/1425 consumer information         
## 8 http://eurovoc.europa.eu/1004 welfare                      
## 9 http://eurovoc.europa.eu/1021 tax system&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The results include labels only for unique identifiers, but with &lt;code&gt;dplyr::left_join()&lt;/code&gt; it is straightforward to append the labels to the entire dataset.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rec_eurovoc %&amp;gt;% 
  left_join(eurovoc_lookup)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Joining, by = &amp;quot;eurovoc&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10 x 5
##    work                    type                 celex   eurovoc      labels     
##    &amp;lt;chr&amp;gt;                   &amp;lt;chr&amp;gt;                &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt;      
##  1 http://publications.eu~ http://publications~ 32012H~ http://euro~ consumer i~
##  2 http://publications.eu~ http://publications~ 31962H~ http://euro~ welfare    
##  3 http://publications.eu~ http://publications~ 31974H~ http://euro~ France     
##  4 http://publications.eu~ http://publications~ 31996H~ http://euro~ form       
##  5 http://publications.eu~ http://publications~ 32015H~ http://euro~ tax system 
##  6 http://publications.eu~ http://publications~ 31974H~ http://euro~ Germany    
##  7 http://publications.eu~ http://publications~ 31999H~ http://euro~ food inspe~
##  8 http://publications.eu~ http://publications~ 52004S~ http://euro~ Ireland    
##  9 http://publications.eu~ http://publications~ 32003H~ http://euro~ Council of~
## 10 http://publications.eu~ http://publications~ E2004C~ http://euro~ food inspe~&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As elsewhere in the API, we can tap into the multilingual nature of EU documents also when it comes to the EuroVoc keywords. Moreover, most concepts in the thesaurus are associated with alternative labels; these can be returned as well (separated by a comma).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;eurovoc_lookup &amp;lt;- elx_label_eurovoc(uri_eurovoc = rec_eurovoc$eurovoc,
                                    alt_labels = TRUE,
                                    language = &amp;quot;sk&amp;quot;)

rec_eurovoc %&amp;gt;% 
  left_join(eurovoc_lookup) %&amp;gt;% 
  select(celex, eurovoc, labels)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Joining, by = &amp;quot;eurovoc&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10 x 3
##    celex       eurovoc             labels                                       
##    &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt;               &amp;lt;chr&amp;gt;                                        
##  1 32012H0090  http://eurovoc.eur~ informácie pre spotrebitela,vzdelávanie spot~
##  2 31962H0816  http://eurovoc.eur~ blahobyt                                     
##  3 31974H0435  http://eurovoc.eur~ Francúzska republika,Francúzsko              
##  4 31996H0592  http://eurovoc.eur~ formulár                                     
##  5 32015H0818~ http://eurovoc.eur~ danová sústava,danový systém                 
##  6 31974H0256  http://eurovoc.eur~ NSR,Nemecko,Nemecká spolková republika,SRN,S~
##  7 31999H0333  http://eurovoc.eur~ analýza potravín,kontrola potravín,potravino~
##  8 52004SC0086 http://eurovoc.eur~ južné Írsko,Írsko                            
##  9 32003H0579  http://eurovoc.eur~ Rada Európskej únie,Rada Európskych spolocen~
## 10 E2004C0055  http://eurovoc.eur~ analýza potravín,kontrola potravín,potravino~&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;elx_fetch_data-fire-get-requests&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;code&gt;elx_fetch_data()&lt;/code&gt;: Fire GET requests&lt;/h2&gt;
&lt;p&gt;A core contribution of the SPARQL requests is that we obtain a comprehensive list of identifiers that we can subsequently use to obtain more data relating to the document in question. While the results of the SPARQL queries are useful also for webscraping (with the &lt;code&gt;rvest&lt;/code&gt; package), the function &lt;code&gt;elx_fetch_data()&lt;/code&gt; enables us to fire GET requests to retrieve data on documents with known identifiers (including Cellar URI).&lt;/p&gt;
&lt;p&gt;One of the most sought-after data in the Eur-Lex dataverse is the text. It is possible now to automate the pipeline for downloading html and plain texts from Eur-Lex. Similarly, you can retrieve the title of the document. For both you can specify also the desired language (English by default). Other metadata might be added in the future.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# the function is not vectorized by default
elx_fetch_data(results$work[1],&amp;quot;title&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Council Directive 79/173/EEC of 6 February 1979 on the programme for the acceleration and guidance of collective irrigation works in Corsica&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# we can use purrr::map() to play that role
library(purrr)

dir_titles &amp;lt;- results[1:10,] %&amp;gt;% # take the first 10 directives only to save time
  mutate(title = map_chr(work,elx_fetch_data, &amp;quot;title&amp;quot;)) %&amp;gt;% 
  as_tibble() %&amp;gt;% 
  select(celex, title)

print(dir_titles)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 10 x 2
##    celex      title                                                             
##    &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;                                                             
##  1 31979L0173 Council Directive 79/173/EEC of 6 February 1979 on the programme ~
##  2 31989L0194 Council Directive 89/194/EEC of 13 March 1989 amending Directive ~
##  3 31984L0378 Council Directive 84/378/EEC of 28 June 1984 amending the Annexes~
##  4 31966L0683 Commission Directive 66/683/EEC of 7 November 1966 eliminating al~
##  5 31993L0004 Council Directive 93/4/EEC of 8 February 1993 amending Directive ~
##  6 31992L0017 Commission Directive 92/17/EEC of 17 March 1992 amending Directiv~
##  7 31983L0447 Commission Directive 83/447/EEC of 18 August 1983 adopting the me~
##  8 31966L0162 Council Directive 66/162/EEC of 28 February 1966 concerning the a~
##  9 31974L0508 Commission Directive 74/508/EEC of 30 September 1974 amending Com~
## 10 31982L0957 Third Commission Directive 82/957/EEC of 22 December 1982 amendin~&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that text requests are by far the most time-intensive; requesting the full text for thousands of documents is liable to extend the run-time into hours. Texts are retrieved from html by priority, but methods for pdfs and .docs are also implemented.&lt;a href=&#34;#fn3&#34; class=&#34;footnote-ref&#34; id=&#34;fnref3&#34;&gt;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt; The function even handles multi-document resources (by pasting them together).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;application&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Application&lt;/h1&gt;
&lt;p&gt;In this section I showcase a simple application of &lt;code&gt;eurlex&lt;/code&gt; on making overviews of EU legislation. First, we collate data on directives.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dirs &amp;lt;- elx_make_query(resource_type = &amp;quot;directive&amp;quot;, include_date = TRUE, include_force = TRUE) %&amp;gt;% 
  elx_run_query() %&amp;gt;% 
  rename(date = `callret-3`)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s calculate the proportion of directives currently in force in the entire set of directives ever adopted. This variable offers a particularly good demonstration of the usefulness of the package to retrieve EU law data, because it changes every day, as new acts enter into force and old ones drop out. Regularly scraping webpages for this purpose and scale is simply impractical and disproportional.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)

dirs %&amp;gt;% 
  count(force) %&amp;gt;% 
  ggplot(aes(x = force, y = n)) +
  geom_col()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-12-16-the-eurlex-r-package_files/figure-html/firstplot-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Directives become naturally outdated with time. It might be all the more interesting to see which older acts are thus still surviving.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dirs %&amp;gt;% 
  ggplot(aes(x = as.Date(date), y = celex)) +
  geom_point(aes(color = force), alpha = 0.1) +
  theme(axis.text.y = element_blank(),
        axis.line.y = element_blank(),
        axis.ticks.y = element_blank())&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-12-16-the-eurlex-r-package_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We want to know a bit more about the directives from 1970s that are still in force today. Their titles could give us a clue.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dirs_1970_title &amp;lt;- dirs %&amp;gt;% 
  filter(between(as.Date(date), as.Date(&amp;quot;1970-01-01&amp;quot;), as.Date(&amp;quot;1980-01-01&amp;quot;)),
         force == &amp;quot;true&amp;quot;) %&amp;gt;% 
  mutate(title = map_chr(work,elx_fetch_data,&amp;quot;title&amp;quot;)) %&amp;gt;% 
  as_tibble()

print(dirs_1970_title)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 70 x 6
##    work                 type              celex  date  force title              
##    &amp;lt;chr&amp;gt;                &amp;lt;chr&amp;gt;             &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;              
##  1 http://publications~ http://publicati~ 31975~ 1975~ true  Council Directive ~
##  2 http://publications~ http://publicati~ 31977~ 1977~ true  First Commission D~
##  3 http://publications~ http://publicati~ 31977~ 1977~ true  Council Directive ~
##  4 http://publications~ http://publicati~ 31973~ 1973~ true  Council Directive ~
##  5 http://publications~ http://publicati~ 31974~ 1974~ true  Council Directive ~
##  6 http://publications~ http://publicati~ 31972~ 1972~ true  Council Directive ~
##  7 http://publications~ http://publicati~ 31972~ 1972~ true  Council Directive ~
##  8 http://publications~ http://publicati~ 31977~ 1977~ true  Council Directive ~
##  9 http://publications~ http://publicati~ 31979~ 1978~ true  Council Directive ~
## 10 http://publications~ http://publicati~ 31979~ 1979~ true  Council Directive ~
## # ... with 60 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I will use the &lt;code&gt;tidytext&lt;/code&gt; package to get a quick idea of what the legislation is about.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidytext)
library(wordcloud)

dirs_1970_title %&amp;gt;% 
  select(celex,title) %&amp;gt;% 
  unnest_tokens(word, title) %&amp;gt;% 
  count(celex, word, sort = TRUE) %&amp;gt;% 
  filter(!grepl(&amp;quot;\\d&amp;quot;, word)) %&amp;gt;% 
  bind_tf_idf(word, celex, n) %&amp;gt;% 
  with(wordcloud(word, tf_idf, max.words = 40, scale = c(1.8,0.1)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-12-16-the-eurlex-r-package_files/figure-html/wordcloud-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;I use term-frequency inverse-document frequency (tf-idf) to weight the importance of the words in the wordcloud. If we used pure frequencies, the wordcloud would largely consist of words conveying little meaning (“the”, “and”, …).&lt;/p&gt;
&lt;p&gt;This is an extremely basic application of the &lt;code&gt;eurlex&lt;/code&gt; package. Much more sophisticated methods can be used to analyse both the content and metadata of European Union legislation. If the package is useful for your research, please consider citing it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;Note, however, that not all resource types will work properly with the pre-specified query.&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;Occasionally, you may encounter legal acts without CELEX numbers, especially when digging through older legislation. It is good to report these to the Eur-Lex helpdesk.&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn3&#34;&gt;&lt;p&gt;It is worth pointing out that the html and pdf contents of older case law differs. Whereas typically the html file is only going to contain a summary and grounds of a judgment, the pdf should also contain background to the dispute.&lt;a href=&#34;#fnref3&#34; class=&#34;footnote-back&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>At Last! Reaching the Remedy for Delay after a Long Ride through the EU Judicial System, Case T 577/14 Gascogne Sack Deutschland and Gascogne v. European Union, EU:T:2017:1</title>
      <link>/publication/ovadek-2017/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>/publication/ovadek-2017/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
